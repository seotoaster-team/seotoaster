// Font-face
//==================================================
.font-face(@fontname, @fontfile, @fontweight : normal, @fontstyle: normal) {
    @font-face{
        font-family : "@{fontname}";
        src         : url("@{fontfile}.eot");
        src         : url("@{fontfile}.eot?#iefix") format("embedded-opentype"), url("@{fontfile}.svg#@{fontname}") format("svg"), url("@{fontfile}.woff") format("woff"), url("@{fontfile}.ttf") format("truetype");
        font-weight : @fontweight;
        font-style  : @fontstyle;
    }
}

// Column-grid system
//==================================================
.column() {
    .activate-responsive(@activate : @responsive) when (@activate = true){
        @responsive-size-tablet-over : (@responsive-size-tablet + 1);
        @media only screen and (min-width : @responsive-size-tablet-over){
            .column-list();
        }
        @responsive-size-mobile-over : (@responsive-size-mobile + 1);
        @media only screen and (max-width : @responsive-size-tablet) and (min-width : @responsive-size-mobile-over){
            .column-list(@columns-tablet, t-);
        }

        @media only screen and (max-width : @responsive-size-mobile){
            .column-list(@columns-mobile, m-);
        }

    }
    .activate-responsive(@activate : @responsive) when (@activate = false){
        .column-list();
    }
    .activate-responsive();
}
.column-list(@column : @columns, @prefix : ~'', @num-column : 1, @full-width : false) when (@column >= @num-column) and (@full-width = false){
    .@{prefix}column_@{num-column} > *:not(.column-none){
        width : round((100% / @num-column) - @column-margin-width, 3);
    }
    .column-list(@column, @prefix, @num-column + 1, false);
}
.column-list(@column : @columns, @prefix : ~'', @num-column : 1, @full-width : true) when (@column >= @num-column) and (@full-width = true){
    .full-width{
        &.@{prefix}column_@{num-column} > *:not(.column-none){
            width : round((100% / @num-column) - @column-margin-width + (@column-margin-width / @num-column), 3);
            @num : ~'@{num-column}n + 1';
            &:nth-child(@{num}){
                margin-left : 0 !important;
            }
        }
    }
    .column-list(@column, @prefix, @num-column + 1, true);
}

// Grid system
//==================================================
.grid() {
    .activate-responsive(@activate : @responsive) when (@activate = true){
        .b-visible, .d-visible, .t-visible, .m-visible{ display : none !important; }
        @responsive-size-tablet-over : (@responsive-size-tablet + 1);
        @media only screen and (min-width : @responsive-size-tablet-over){
            .d-visible{ display : block !important; }
            .d-hide{ display : none !important; }
            .grid-list();
        }
        @responsive-size-mobile-over : (@responsive-size-mobile + 1);
        @media only screen and (max-width : @responsive-size-tablet) and (min-width : @responsive-size-mobile-over){
            .t-visible{ display : block !important; }
            .t-hide{ display : none !important; }
            .grid-list(@grid-columns-tablet, t-);
        }

        @media only screen and (max-width : @responsive-size-mobile){
            .m-visible{ display : block !important; }
            .m-hide{ display : none !important; }
            .grid-list(@grid-columns-mobile, m-);
        }

    }
    .activate-responsive(@activate : @responsive) when (@activate = false){
        .grid-list();
    }
    .activate-responsive();
}
.grid-list(@grid : @grid-columns, @prefix : ~'', @num-column : 1, @switch : true) when (@grid >= @num-column){
    .@{prefix}grid_@{num-column}{
        width : round(percentage((@num-column / @grid)) - @grid-margin-width, 3);
        &.@{prefix}alpha, &.@{prefix}omega{
            width : round(percentage(@num-column / @grid) - @grid-margin-width / 2, 3);
        }
        &.@{prefix}alpha.@{prefix}omega{
            width : round(percentage(@num-column / @grid), 3);
        }
    }
    .grid-list(@grid, @prefix, @num-column + 1, false);
    .activate-grid-element(@switch);
}

.activate-grid-element(@activate) when (@activate = true){
    .@{prefix}alpha{ margin-left : 0 !important; }
    .@{prefix}omega{ margin-right : 0 !important; }
    .prefix(@grid, @prefix, @num-column);
    .suffix(@grid, @prefix, @num-column);
    .push(@grid, @prefix, @num-column);
    .pull(@grid, @prefix, @num-column);
}

.prefix(@grid : @grid-columns, @prefix : ~'', @num-column) when (@grid > @num-column){
    .@{prefix}prefix_@{num-column}{
        margin-left : round(percentage(@num-column / @grid) + @grid-margin-width / 2, 2) !important;
        &.alpha{
            margin-left : round(percentage(@num-column / @grid), 2) !important;
        }
    }
    .prefix(@grid, @prefix, @num-column + 1);
}

.suffix(@grid : @grid-columns, @prefix : ~'', @num-column) when (@grid > @num-column){
    .@{prefix}suffix_@{num-column}{
        margin-right : round(percentage(@num-column / @grid) + @grid-margin-width / 2, 2) !important;
        &.omega{
            margin-right : round(percentage(@num-column / @grid), 2) !important;
        }
    }
    .suffix(@grid, @prefix, @num-column + 1);
}

.pull(@grid : @grid-columns, @prefix : ~'', @num-column) when (@grid > @num-column){
    .@{prefix}pull_@{num-column}{
        left : round(percentage(@num-column / @grid) * -1, 2) !important;
    }
    .pull(@grid, @prefix, @num-column + 1);
}

.push(@grid : @grid-columns, @prefix : ~'', @num-column) when (@grid > @num-column){
    .@{prefix}push_@{num-column}{
        left : round(percentage(@num-column / @grid), 2) !important;
    }
    .push(@grid, @prefix, @num-column + 1);
}

// Margin - Padding
//==================================================
.margin-list(@value, @position:all, @step:5) when (@value >= 0) and not (@value = none){
    @name : e(`(function(){ var a = "@{value}"; return a.replace('%', '').replace('.', '-')}())`);

    .result(@v, @n, @p) when (@p = all){
        .m@{n}{ margin : @v; }
    }
    .result(@v, @n, @p) when (@p = top){
        .mt@{n}{ margin-top : @v; }
    }
    .result(@v, @n, @p) when (@p = right){
        .mr@{n}{ margin-right : @v; }
    }
    .result(@v, @n, @p) when (@p = bottom){
        .mb@{n}{ margin-bottom : @v; }
    }
    .result(@v, @n, @p) when (@p = left){
        .ml@{n}{ margin-left : @v; }
    }

    .result(@value, @name, @position) !important;
    .margin-list(@value - @step, @position, @step);
}

.padding-list(@value, @position:all, @step:5) when (@value >= 0) and not (@value = none){
    @name : e(`(function(){ var a = "@{value}"; return a.replace('%', '').replace('.', '-')}())`);

    .result(@v, @n, @p) when (@p = all){
        .p@{n}{ padding : @v; }
    }
    .result(@v, @n, @p) when (@p = top){
        .pt@{n}{ padding-top : @v; }
    }
    .result(@v, @n, @p) when (@p = right){
        .pr@{n}{ padding-right : @v; }
    }
    .result(@v, @n, @p) when (@p = bottom){
        .pb@{n}{ padding-bottom : @v; }
    }
    .result(@v, @n, @p) when (@p = left){
        .pl@{n}{ padding-left : @v; }
    }

    .result(@value, @name, @position) !important;
    .padding-list(@value - @step, @position, @step);
}

.position-list(@value, @position, @step:5) when (@value >= 0) and not (@value = none){
    @name : e(`(function(){ var a = "@{value}"; return a.replace('%', '').replace('.', '-')}())`);

    .result(@v, @n, @p) when (@p = top){
        .t@{n}{ top : @v; }
    }
    .result(@v, @n, @p) when (@p = right){
        .r@{n}{ right : @v; }
    }
    .result(@v, @n, @p) when (@p = bottom){
        .b@{n}{ bottom : @v; }
    }
    .result(@v, @n, @p) when (@p = left){
        .l@{n}{ left : @v; }
    }

    .result(@value, @name, @position) !important;
    .position-list(@value - @step, @position, @step);
}

// Width - Height
//==================================================
.width-list(@width, @step:5) when (@width >= 0) and not (@width = none){
    @name : e(`(function(){ var a = "@{width}"; return a.replace('%', '')}())`);

    .result(@w, @n) {
        .w@{n}{ width : @w; }
    }
    .result(@width, @name);
    .width-list(@width - @step, @step);
}
.height-list(@height, @step:5) when (@height >= 0) and not (@height = none){
    @name : e(`(function(){ var a = "@{height}"; return a.replace('%', '')}())`);

    .result(@h, @n) {
        .h@{n}{ height : @h; }
    }
    .result(@height, @name);
    .height-list(@height - @step, @step);
}

// Text overflow
// Requires inline-block or block for proper styling
//==================================================
.text-overflow() {
    overflow      : hidden;
    text-overflow : ellipsis;
    white-space   : nowrap;
}
// Opacity
//==================================================
.opacity(@opacity: 0.5) {
    opacity : @opacity;
    .activate-support-ie8(@activate, @activate2) when (@activate = true) and (@activate2 = true){
        @opperc : @opacity * 100;
        filter : ~"alpha(opacity=@{opperc})";
    }
    .activate-support-ie8(@ie8, @ie);
}

// Display: inline-block
//==================================================
.inline-block-wrap(@valign : middle, @el : ~'>*') {
    font-size : 0;

    @{el}{
        .inline-block(@valign);
        .font-size-unit(@unit : @font-size-base) when (isem(@unit)) and (ispercentage(@unit)){ font-size : @font-size-base * 16; }
        .font-size-unit(@unit : @font-size-base) when not (isem(@unit)){ font-size : @font-size-base; }
        .font-size-unit();
    }
}

.inline-block(@valign : middle) {
    display        : inline-block;
    vertical-align : @valign;
    .activate-support-ie7(@activate, @activate2) when (@activate = true) and (@activate2 = true){
        *zoom    : 1; // Fix for IE7
        *display : inline; // Fix for IE7
    }
    .activate-support-ie7(@ie7, @ie);
}

// Hide text
//==================================================
.hide-text() {
    font        : 0/0 a;
    text-shadow : none;
}

// CSS3 support in ie
//==================================================
.pie() when (@activate-pie = true){
    behavior : url('../js/system/PIE.php');
}

// -- Grid Elements
.grid-elements(@num-column, @margin : @grid-margin-width, @full: false, @tablet-column : @responsive-column-tablet, @mobile-column : @responsive-column-mobile, @style-switch : true) when (@num-column > 0){
    .activate-style-switch() when (@style-switch = true) and (@full = false){
        margin-left  : unit(@margin / 2, ~"%");
        margin-right : unit(@margin / 2, ~"%");
    }
    .activate-style-switch() when (@style-switch = true) and (@full = true){
        margin-left  : unit(@margin, ~"%");
        margin-right : 0;
    }
    .active-full-width() when (@full = false){
        width : (100% / @num-column) - @margin;
    }
    .active-full-width() when (@full = true){
        width : (100% / @num-column) - @margin + (@margin / @num-column);

        &:nth-child(n) when (@style-switch = false) and not (@num-column = 1){ margin-left : unit(@margin, ~"%"); }

        @num : ~'@{num-column}n + 1';
        &:nth-child(@{num}) when (@full = true){
            margin-left : 0;
        }
    }
    .active-full-width();
    .activate-style-switch();
    .grid-elements-device(@tablet-column, @mobile-column, @margin, @full);
}

.grid-elements-device(@tablet-column, @mobile-column, @margin, @full) when (@responsive = true){
    @responsive-size-mobile-over : (@responsive-size-mobile + 1);
    @media only screen and (max-width : @responsive-size-tablet) and  (min-width : @responsive-size-mobile-over){
        .grid-elements(@tablet-column, @margin, @full, 0, 0, false);
    }
    @media only screen and (max-width : @responsive-size-mobile){
        .grid-elements(@mobile-column, @margin, @full, 0, 0, false);
    }
}

// Icon size
//==================================================
.icon-size(@size) when (@size > 0) and not(isem(@size)) and not(ispercentage(@size)){
    width       : @size;
    height      : @size;
    line-height : @size;
    font-size   : 0;

    &:before{
        font-size : @size;
    }
}
.icon-size(@size) when (@size > 0) and (isem(@size)), (ispercentage(@size)){
    width       : 1em;
    height      : 1em;
    line-height : 1;
    font-size   : @size;
}

// Social Field
//==================================================
.social-field(@width : 240px, @size : @button-height-base, @padding : 0) when (@social-fields = true){
    .social-field{
        .labeled{
            float  : left;
            margin : 0;
            cursor : pointer;

            & + .labeled{
                margin-left : 5px;
            }

            [class*="ticon-"]{
                float       : left;
                font-size   : 0;
                width       : @size;
                height      : @size;
                line-height : @size;

                &:before{
                    vertical-align : middle;
                    font-size      : @size - @padding * 2;
                }
            }

            input{
                width       : 0;
                margin-left : -@padding-base-horizontal * 2;
            }

            :checked ~ input{
                margin-left : 0;
                width       : @width;
            }
        }
    }
}

// Resize anything
//==================================================
.resize(@direction:none) {
    resize   : @direction; // Options: horizontal, vertical, both, none
    overflow : auto; // Safari fix
}

// ClearFix
//==================================================
.clearfix() {
    *zoom : 1;

    &:after{
        content    : "";
        clear      : both;
        display    : block;
        overflow   : hidden;
        visibility : hidden;
        height     : 0;
    }
}

// Flexbox Layout http://css-tricks.com/snippets/css/a-guide-to-flexbox/
//==================================================
.flexbox() {
    display : -webkit-box;
    display : -moz-box;
    display : -ms-flexbox;
    display : -webkit-flex;
    display : flex;
}

.flex(@values) {
    -webkit-box-flex : @values;
    -moz-box-flex    : @values;
    -webkit-flex     : @values;
    -ms-flex         : @values;
    flex             : @values;
}

.order(@val) {
    -webkit-box-ordinal-group : @val;
    -moz-box-ordinal-group    : @val;
    -ms-flex-order            : @val;
    -webkit-order             : @val;
    order                     : @val;
}