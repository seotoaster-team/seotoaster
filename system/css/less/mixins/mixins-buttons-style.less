.button(@color : @button-primary-color, @background : @button-primary-bg, @border : @button-primary-border, @size : base, @type : false){
    .inline-block();
    margin-bottom   : 0; // For input.btn
    text-align      : center;
    cursor          : pointer;
    position        : relative;
    text-decoration : none;
    .user-select();
    .activate-type(@type);
    .activate-size(@size, @type);
    .activate-border(@button-border-width);
    .activate-transition(@activate-button-transition);
    .button-color(@color, @background, @border, true);

    &:not(.icon){
        .text-overflow;
    }

    &[class*="grid_"]{
        padding-left  : 0;
        padding-right : 0;
    }

    &[class*="icon-"]:not(:empty):before{
        margin-right : 5px;
    }
}

.activate-size(@size, @type) when (@size = larger) and (@type = false){ .button-size-larger(); }
.activate-size(@size, @type) when (@size = large) and (@type = false){ .button-size-large(); }
.activate-size(@size, @type) when (@size = base) and (@type = false){ .button-size-base(); }
.activate-size(@size, @type) when (@size = small) and (@type = false){ .button-size-small(); }

.activate-size(@size, @type) when (@size = larger) and (@type = icon){ .button-icon-size(@icon-size-larger); }
.activate-size(@size, @type) when (@size = large) and (@type = icon){ .button-icon-size(@icon-size-large); }
.activate-size(@size, @type) when (@size = base) and (@type = icon){ .button-icon-size(); }
.activate-size(@size, @type) when (@size = small) and (@type = icon){ .button-icon-size(@icon-size-small); }

.activate-type(@type) when (@type = false){ .box-sizing(); }
.activate-type(@type) when (@type = icon){ .box-sizing(content-box); }

.activate-border(@value) when (@value > 0){
    border-width : @button-border-width;
    border-style : solid;
}

.activate-transition(@value) when (@value = true){
    .transition(background, 0.3s);
}

// Button size
//==================================================
.button-size(@button-font-size, @button-padding-vertical, @button-padding-horizontal, @button-border-radius : @button-border-radius){
    @button-height : floor(@button-font-size * unit(@button-line-height) + @button-padding-vertical * 2 + @button-border-width * 2);
    height      : @button-height;
    padding     : @button-padding-vertical @button-padding-horizontal;
    font-size   : @button-font-size;
    line-height : @button-height - @button-padding-vertical * 2 - @button-border-width * 2;
    .border-radius(@button-border-radius);
}

.button-size-larger(@activate: @activate-alternate-style-button-size-larger, @activate2: @activate-alternate-style-button-size) when (@activate = true) and (@activate2 = true){
    height      : @button-height-larger;
    padding     : @button-padding-larger-vertical @padding-larger-horizontal;
    font-size   : @button-font-size-larger;
    line-height : @button-height-larger - @button-padding-larger-vertical * 2 - @button-border-width * 2;
    .border-radius(@button-larger-border-radius);
}

.button-size-large(@activate: @activate-alternate-style-button-size-large, @activate2: @activate-alternate-style-button-size) when (@activate = true) and (@activate2 = true){
    height      : @button-height-large;
    padding     : @button-padding-large-vertical @padding-large-horizontal;
    font-size   : @button-font-size-large;
    line-height : @button-height-large - @button-padding-large-vertical * 2 - @button-border-width * 2;
    .border-radius(@button-large-border-radius);
}

.button-size-base() {
    height      : @button-height-base;
    padding     : @button-padding-base-vertical @padding-base-horizontal;
    font-size   : @button-font-size-base;
    line-height : @button-height-base - @button-padding-base-vertical * 2 - @button-border-width * 2;
    .border-radius(@button-border-radius);
}

.button-size-small(@activate: @activate-alternate-style-button-size-small, @activate2: @activate-alternate-style-button-size) when (@activate = true) and (@activate2 = true){
    height      : @button-height-small;
    padding     : @button-padding-small-vertical @padding-small-horizontal;
    font-size   : @button-font-size-small;
    line-height : @button-height-small - @button-padding-small-vertical * 2 - @button-border-width * 2;
    .border-radius(@button-small-border-radius);
}

.button-icon-size(@icon-size : @icon-size-base) {
    .icon-size(@icon-size);
    padding : (@button-height-base - @icon-size - @button-border-width * 2) / 2;
}

// Easily pump out default styles, as well as :hover, :focus, :active,
// and disabled options for all buttons
.link-color(@color, @eachColor: true) when (@eachColor = true){
    color      : @color;
    background : transparent !important;
    .activate-border(@value) when (@value > 0){
        border : none;
    }
    .activate-border(@button-border-width);

    .activate-hover(@value) when (@value = true){
        &:hover, &:active{
            color : darken(@color, 30%);
            .box-shadow(none);
        }
    }
    .activate-hover(@value) when (@value = false){
        &.touch{
            color : darken(@color, 30%);
            .box-shadow(none);
        }
    }
    .activate-hover(@activate-hover);

    //    &.disabled,
    &[disabled]{
        color           : desaturate(@color, 30%);
        text-decoration : none;
        .box-shadow(none);
    }
}

.link-color(@color, @color-hover, @eachColor: true, @inverse: true) when (iscolor(@color-hover)) and  (@eachColor = true) and (@inverse = true){
    color      : @color;
    background : transparent !important;
    .activate-border(@value) when (@value > 0){
        border : none;
    }
    .activate-border(@button-border-width);

    .activate-hover(@value) when (@value = true){
        &:hover, &:active{
            color : @color-hover;
            .box-shadow(none);
        }
    }
    .activate-hover(@value) when (@value = false){
        &.touch{
            color : @color-hover;
            .box-shadow(none);
        }
    }
    .activate-hover(@activate-hover);

    //    &.disabled,
    &[disabled]{
        color           : desaturate(@color, 30%);
        text-decoration : none;
        .box-shadow(none);
    }
}

.button-color( @color, @background, @border, @eachColor: true) when (@eachColor = true){
    color      : @color;
    background : @background;
    .box-shadow(none, @input-shadow-focus);
    .activate-border(@value) when (@value > 0){
        border-color : @border;
    }
    .activate-border(@button-border-width);

    .activate-hover(@value) when (@value = true){
        &:hover, &:active{
            color      : @color;
            background : darken(@background, 10%);
            .activate-border(@value) when (@value > 0){
                border-color : darken(@border, 10%);
            }
            .activate-border(@button-border-width);
        }

        &:active{
            .box-shadow(0.2rem 0.2rem 0.2rem darken(@background, 25%) inset, @activate-button-box-shadow);
        }
    }
    .activate-hover(@value) when (@value = false){
        &.touch, input:checked+&{
            color      : @color;
            background : darken(@background, 10%);
            .activate-border(@value) when (@value > 0){
                border-color : darken(@border, 10%);
            }
            .activate-border(@button-border-width);
            .box-shadow(0.2rem 0.2rem 0.2rem darken(@background, 25%) inset, @activate-button-box-shadow);
        }
    }
    .activate-hover(@activate-hover);

    //    &.disabled,
    &[disabled]{
        .box-shadow(none, @activate-button-box-shadow);
        color           : desaturate(@color, 30%);
        background      : desaturate(@background, 30%);
        text-decoration : none;
        .activate-border(@value) when (@value > 0){
            border-color : desaturate(@border, 30%);
        }
        .activate-border(@button-border-width);
    }
}

.button-color( @color, @background, @border, @color2, @background2, @border2, @eachColor: true, @inverse: true) when (iscolor(@color2)) and (@eachColor = true) and  (@inverse = true){
    color           : @color;
    background      : @background;
    text-decoration : none;
    .box-shadow(none, @input-shadow-focus);
    .activate-border(@value) when (@value > 0){
        border-color : @border;
    }
    .activate-border(@button-border-width);

    .activate-hover(@value) when (@value = true){
        &:hover, &:active{
            color      : @color2;
            background : @background2;
            .activate-border(@value) when (@value > 0){
                border-color : @border2;
            }
            .activate-border(@button-border-width);
        }

        &:active{
            .box-shadow(0.2rem 0.2rem 0.4rem darken(@background2, 25%) inset, @activate-button-box-shadow);
        }
    }
    .activate-hover(@value) when (@value = false){
        &.touch, input:checked+&{
            color      : @color2;
            background : @background2;
            .activate-border(@value) when (@value > 0){
                border-color : @border2;
            }
            .activate-border(@button-border-width);
            .box-shadow(0.2rem 0.2rem 0.4rem darken(@background2, 25%) inset, @activate-button-box-shadow);
        }
    }
    .activate-hover(@activate-hover);

    //    &.disabled,
    &[disabled]{
        .box-shadow(none, @activate-button-box-shadow);
        color           : desaturate(@color, 30%);
        background      : @background;
        text-decoration : none;
        .activate-border(@value) when (@value > 0){
            border-color : @border;
        }
        .activate-border(@button-border-width);
    }
}

// 3D-Button
//==================================================
.button-3d(@color, @background, @border) {
    .box-shadow(~'0 0.3em 0 0 @{border}, 0 0.3em 0 0.15em @{gray-dark}');

    .activate-hover(@value) when (@value = true){
        &:hover{
            background : darken(@background, 3%);
        }

        &:active{
            top        : 0.25em;
            background : @background;
            .box-shadow(0 0 0 0.15em @gray-dark);
        }
    }
    .activate-hover(@value) when (@value = false){
        &.touch{
            top        : 0.3em;
            background : @background;
            .box-shadow(0 0 0 0.15em @gray-dark);
        }
    }
    .activate-hover(@activate-hover);
}